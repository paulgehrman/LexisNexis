@page "/addeditrecipe"
@page "/addeditrecipe/{id:int}"
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@using LexisNexis.Client.Components;

<div class="container">
    <div class="row">
        <div class="col-12">
            @if (Id is null)
            {
                <h3>Add New Recipe</h3>
            }
            else
            {
                <h3>Edit Recipe</h3>
            }
        </div>
    </div>

    <EditForm Model="@recipe">
        @if (validationMsgs.Count > 0)
        {
            @foreach (string msg in validationMsgs)
            {
                <div class="row pt-2">
                    <div class="col-lg-11 offset-1" style="color:red;">&bull; @msg</div>
                </div>
            }
        }

        <div class="row">
            <div class="col-1 text-end">
                <label for="recipetitle" class="control-label">Title</label><sup><span style="color:red;">*</span></sup>
            </div>
            <div class="col-7">
                <InputText id="recipetitle" @bind-Value="recipe.Title" class="form-control" />
            </div>
        </div>
        <div class="row pt-2">
            <div class="col-1 text-end">
                <label for="recipedescription" class="control-label">Description</label><sup><span style="color:red;">*</span></sup>
            </div>
            <div class="col-7">
                <InputTextArea id="recipedescription" @bind-Value="recipe.Description" rows="4" class="form-control" />
            </div>
        </div>
        <div class="row pt-2">
            <div class="col-1 text-end">
                <label for="image" class="control-label">Image</label>
            </div>

            @if (recipe.Image is not null & !String.IsNullOrEmpty(recipe.ImageName))
            {
                <div class="col-2">
                    <button @onclick="() => ViewFile(recipe)" class="btn btn-md btn-link pl-0 ml-0 shadow-none" style="box-shadow:none; outline:none;" data-toggle="tooltip" title="View File">@recipe.ImageName</button>
                </div>
            }
            <div class="col-4">
                <InputFile OnChange="LoadFile" accept="@acceptedDocTypes" />
            </div>
        </div>
        <div class="row pt-2">
            <div class="col-1 text-end">
                <label for="ingredients" class="control-label">Ingredients</label>
            </div>
            <div class="col-7 border">
                @if (recipe.RecipeIngredients is not null && recipe.RecipeIngredients.Count > 0)
                {
                    <ul>
                        @foreach (RecipeIngredient ingredient in recipe.RecipeIngredients)
                        {
                            <div class="row pt-2">
                                <div class="col-9">
                            <li>@ingredient.Ingredient</li>
                    </div>
                    <div class="col-2">
                        <button @onclick="() => RemoveIngredient(ingredient.RecipeIngredientId)" class="btn btn-sm btn-outline-danger" data-toggle="tooltip" title="Delete" style="margin-left:5px;"><img src="/images/trash.svg" height="16" alt="delete" /></button>
                    </div>
                </div>
                        }
            </ul>
                }
                else
                {
            <span style="color:red;">No ingredients added.</span>
                }
</div>
<div class="col-3">
    <button @onclick="(() => AddIngredient())" class="btn btn-sm btn-primary">Add Ingredient</button>
</div>
        </div>
<div class="row pt-2">
    <div class="col-1 text-end">
        <label for="instructions" class="control-label">Instructions</label>
    </div>
    <div class="col-7 border">
                @if (recipe.RecipeInstructions is not null && recipe.RecipeInstructions.Count > 0)
                {
            <ul>
                        @foreach (RecipeInstruction instruction in recipe.RecipeInstructions)
                        {
                    <div class="row pt-2">
                        <div class="col-9">
                    <li>@instruction.Instruction</li>
            </div>
            <div class="col-2">
                                    @*  <button @onclick="(() => RemoveInstruction(instruction.RecipeInstructionId))" class="btn btn-sm btn-danger">Remove</button> *@
                <button @onclick="() => RemoveIngredient(instruction.RecipeInstructionId)" class="btn btn-sm btn-outline-danger" data-toggle="tooltip" title="Delete" style="margin-left:5px;"><img src="/images/trash.svg" height="16" alt="delete" /></button>
            </div>
        </div>
                        }
                                            </ul>
                }
                else
                {
    <span style="color:red;">No instructions added.</span>
                }
            </div>
<div class="col-3">
    <button @onclick="(() => AddInstruction())" class="btn btn-sm btn-primary">Add Instruction</button>
</div>
        </div>
<div class="row pt-2">
    <div class="col-8 offset-2">
        <button @onclick="SaveRecipe" class="btn btn-success">Save</button>
        <button @onclick="Cancel" class="btn btn-light">Cancel</button>
    </div>
</div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private Recipe recipe = new();
    private List<string> validationMsgs = new();
    private string acceptedDocTypes = String.Empty;

    /*********************************************************
     * On Initiliazed Async
    **********************************************************/
    protected override async Task OnInitializedAsync()
    //protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id is not null)
            {
                var result = await httpClient.GetFromJsonAsync<Recipe>($"api/recipe/{Id}");
                if (result is not null)
                {
                    recipe = result;
                    if (recipe.RecipeIngredients is null)
                    {
                        recipe.RecipeIngredients = new List<RecipeIngredient>();
                    }
                }
                else
                {
                    recipe.Title = String.Empty;
                    recipe.Description = String.Empty;
                }
            }
            else
            {
                recipe.Title = String.Empty;
                recipe.Description = String.Empty;
            }

            acceptedDocTypes = ".jpg,.jpeg,.png,.gif,.tiff";
        }

        catch (Exception ex)
        {
            string errMsg = ex.Message;
        }
    }

    /********************************************************
     * Remove Ingredient
    *********************************************************/
    private void RemoveIngredient(int ingredientId)
    {
        try
        {
            var ingredient = recipe.RecipeIngredients.Where(i => i.RecipeIngredientId == ingredientId).FirstOrDefault();
            recipe.RecipeIngredients.Remove(ingredient);
        }

        catch (Exception ex)
        {
            string errMsg = ex.Message;
        }
    }

    /********************************************************
     * Remove Instruction
    *********************************************************/
    private void RemoveInstruction(int instructionId)
    {
        try
        {
            var instruction = recipe.RecipeInstructions.Where(i => i.RecipeInstructionId == instructionId).FirstOrDefault();
            recipe.RecipeInstructions.Remove(instruction);
        }

        catch (Exception ex)
        {
            string errMsg = ex.Message;
        }
    }

    /********************************************************
     * Add Ingredient
    *********************************************************/
    private async Task AddIngredient()
    {
        var modal = Modal.Show<AddIngredient>();
        var result = await modal.Result;

        if (result.Confirmed && result.Data.ToString().Trim().Length > 0)
        {
            string ingredient = result.Data.ToString();
            RecipeIngredient recipeIngredient = new(recipe.RecipeId, ingredient);
            recipe.RecipeIngredients.Add(recipeIngredient);
        }
    }

    /********************************************************
     * Add Instruction
    *********************************************************/
    private async Task AddInstruction()
    {
        var modal = Modal.Show<AddInstruction>();
        var result = await modal.Result;

        if (result.Confirmed)
        {
            string instruction = result.Data.ToString();
            RecipeInstruction recipeInstruction = new(recipe.RecipeId, instruction);
            recipe.RecipeInstructions.Add(recipeInstruction);
        }
    }

    /********************************************************
     * Save Recipe
    *********************************************************/
    private async Task SaveRecipe()
    {
        validationMsgs.Clear();
        List<string> controlsToHighlight = new();

        if (recipe.Title.Trim().Length == 0)
        {
            validationMsgs.Add("Recipe title is required.");
            controlsToHighlight.Add("recipetitle");
        }

        if (recipe.Description.Trim().Length == 0)
        {
            validationMsgs.Add("Recipe description is required.");
            controlsToHighlight.Add("recipedescription");
        }

        if (validationMsgs.Count > 0)
        {
            await jsRuntime.InvokeVoidAsync("highlightBorders", controlsToHighlight);
            return;
        }

        if (Id is null)
        {
            await httpClient.PostAsJsonAsync("api/recipe", recipe);
        }
        else
        {
            await httpClient.PutAsJsonAsync($"api/recipe/{Id}", recipe);
        }
        navManager.NavigateTo("/recipes");
    }

    /**********************************************************
     * Load File
    ***********************************************************/
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            //TODO max size config

            Stream stream = e.File.OpenReadStream(Convert.ToInt64(5242880));
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();

            recipe.Image = ms.ToArray();
            recipe.ImageName = e.File.Name;

            ms.Close();
        }

        catch (Exception ex)
        {
            string errMsg = ex.Message;
        }
    }

    /**************************************************************
     * View File
    **************************************************************/
    public async Task ViewFile(Recipe recipe)
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("openFileInNewTab", recipe.Image, Utility.GetMimeType(recipe.ImageName));
        }

        catch (Exception ex)
        {
            string errMsg = ex.Message;
        }
    }

    /**************************************************************
     * Cancel
    **************************************************************/
    private void Cancel()
    {
        navManager.NavigateTo("/recipes");
    }
}