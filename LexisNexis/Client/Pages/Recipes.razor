@page "/"
@page "/recipes"
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@using LexisNexis.Client.Components;

<div class="container">
    <div class="row">
        <div class="col-4">
            @if (viewAll)
            {
                <h3>All Recipes</h3>
            }
            else
            {
                <h3>Recipes</h3>
            }
        </div>
        @if (recipes is not null && recipes.Count > 0)
        {
            <div class="col-2 text-end">
                <InputText @bind-Value="model.SearchString" class="form-control" />
        </div>
            <div class="col-1">
                <button class="btn btn-sm btn-light" data-toggle="tooltip" title="Search" @onclick="() => Search()"><img src="/images/search-icon.png" height="20" alt="Search" /></button>
            </div>
        }
      
        @if (!viewAll)
        {
            <div class="col-2">
                <button class="btn btn-sm btn-link" @onclick="() => ViewAll()">View All Recipes</button>
            </div>
        }
        <div class="col-2 text-end">
            <button @onclick="AddRecipe" class="btn btn-success">Add Recipe</button>
        </div>
    </div>

    @if (recipes is null)
    {
        <span>Loading recipes...</span>
    }
    else if (recipes.Count > 0)
    {
        <div class="row pt-2">
            <div class="col-12">
                <table class="table" style="border-top:solid;">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Image</th>
                            <th>Ingredients</th>
                            <th>Instructions</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Recipe recipe in recipes)
                        {
                            <tr>
                                <td>@recipe.Title</td>
                                <td>@recipe.Description</td>
                                <td>
                                    @if (!String.IsNullOrEmpty(recipe.ImageName))
                                    {
                                        <button @onclick="() => ViewFile(recipe)" class="btn btn-md btn-link pl-0 ml-0shadow-none" style="box-shadow:none; outline:none;" data-toggle="tooltip" title="View File">@recipe.ImageName</button>
                                    }
                                </td>
                                <td>
                                    <ul>
                                        @foreach (RecipeIngredient ingredient in recipe.RecipeIngredients)
                                        {
                                            <li>@ingredient.Ingredient</li>
                                        }
                                    </ul>
                                </td>
                                <td>
                                    <ul>
                                        @foreach (RecipeInstruction instruction in recipe.RecipeInstructions)
                                        {
                                            <li>@instruction.Instruction</li>
                                        }
                                    </ul>
                                </td>
                                <td>
                                    @*  <button @onclick="(() => EditRecipe(recipe.RecipeId))" class="btn btn-sm btn-primary">Edit</button> *@
                                    <button @onclick="() => EditRecipe(recipe.RecipeId)" class="btn btn-sm btn-outline-info" data-toggle="tooltip" title="Edit"><img src="/images/edit-icon.png" height="20" alt="edit" /></button>
                                </td>
                                <td>
                                    @*     <button @onclick="(() => DeleteRecipe(recipe))" class="btn btn-sm btn-danger">Delete</button> *@
                                    <button @onclick="() => DeleteRecipe(recipe)" class="btn btn-sm btn-outline-danger" data-toggle="tooltip" title="Delete" style="margin-left:5px;"><img src="/images/trash.svg" height="16" alt="delete" /></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="row pt-3">
            <div class="col-12">
                <span style="color:red;">No recipes found. Click Add Recipe to add one.</span>
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    List<Recipe>? allRecipes;
    List<Recipe>? recipes;
    Model model = new();
    private bool viewAll;

    /*******************************************************
     * On Initialized Async
    ********************************************************/
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await httpClient.GetFromJsonAsync<List<Recipe>>("api/recipe");
            if (result != null)
            {
                allRecipes = result;
                recipes = result;
            }

            viewAll = true;
            model.SearchString = String.Empty;
        }
        catch (Exception ex)
        {
            string err = ex.Message;
        }
    }

    /***************************************************
     * Add Recipe
    ****************************************************/
    private void AddRecipe()
    {
        navManager.NavigateTo("/addeditrecipe");
    }

    /***************************************************
     * Edit Recipe
    ****************************************************/
    private void EditRecipe(int id)
    {
        navManager.NavigateTo($"/addeditrecipe/{id}");
    }

    /***************************************************
     * Delete Recipe
    ****************************************************/
    private async Task DeleteRecipe(Recipe recipe)
    {
        var modal = Modal.Show<DeleteConfirm>();
        var result = await modal.Result;

        if (result.Confirmed && result.Data.ToString() == "true")
        {
            await httpClient.DeleteAsync($"api/recipe/{recipe.RecipeId}");
            recipes.Remove(recipe);
        }
    }

    /***************************************************
     * Search
    ****************************************************/
    private void Search()
    {
        model.SearchString = model.SearchString.ToLower();

        recipes = allRecipes.Where(r => r.Title.ToLower().Contains(model.SearchString) 
        || r.Description.ToLower().Contains(model.SearchString)
        || r.RecipeIngredients.Any(i => i.Ingredient.ToLower().Contains(model.SearchString))
        || r.RecipeInstructions.Any(i => i.Instruction.ToLower().Contains(model.SearchString))
        ).ToList();

        viewAll = false;
    }

    /***************************************************
     * View All
    ****************************************************/
    private void ViewAll()
    {
        recipes = allRecipes;
        viewAll = true;
        model.SearchString = String.Empty;
    }

    /**************************************************************
     * View File
    **************************************************************/
    public async Task ViewFile(Recipe recipe)
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("openFileInNewTab", recipe.Image, Utility.GetMimeType(recipe.ImageName));
        }

        catch (Exception ex)
        {
            string errMsg = ex.Message;
        }
    }

    /***************************************************
     * Model
    ****************************************************/
    private class Model
    {
        public string SearchString { get; set; }
    }
}